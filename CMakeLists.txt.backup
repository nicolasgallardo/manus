cmake_minimum_required(VERSION 3.24)
project(manus_integration CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Build options
option(MANUS_BUILD_TESTS "Build test executables" ON)
option(USE_SYSTEM_EIGEN "Prefer system/vcpkg Eigen3 via find_package" ON)

# Set policies to avoid warnings
if(POLICY CMP0167)
    cmake_policy(SET CMP0167 NEW)  # FindBoost module removal
endif()
if(POLICY CMP0144)
    cmake_policy(SET CMP0144 NEW)  # find_package uppercase
endif()

# Enable CTest if building tests
if(MANUS_BUILD_TESTS)
    include(CTest)
    enable_testing()
endif()

# ---- Eigen provider switch (AUTHORITATIVE) ----
set(SKIP_VENDOR_EIGEN OFF CACHE BOOL "Force-skip any vendored Eigen fetch in subprojects")

# Try system Eigen first
set(_eigen_ok FALSE)
if(USE_SYSTEM_EIGEN)
    find_package(Eigen3 CONFIG QUIET)  # provides Eigen3::Eigen
    if(TARGET Eigen3::Eigen)
        set(_eigen_ok TRUE)
        message(STATUS "Using system/vcpkg Eigen3::Eigen")
        # Make this visible/authoritative to subdirs
        set(EIGEN3_FROM_SYSTEM TRUE CACHE BOOL "Eigen provided by system/vcpkg" FORCE)
        set(SKIP_VENDOR_EIGEN   TRUE CACHE BOOL "Skip vendored Eigen everywhere"  FORCE)
        message(STATUS "Eigen selection: SYSTEM (propagated to all subdirs)")
    endif()
endif()

# Fallback: vendor Eigen only if system not found AND target doesn't exist
if(NOT _eigen_ok AND NOT TARGET Eigen3::Eigen)
    message(STATUS "System Eigen not found; allowing vendored Eigen fallback")
    set(EIGEN3_FROM_SYSTEM FALSE CACHE BOOL "Eigen provided by system/vcpkg" FORCE)
    set(SKIP_VENDOR_EIGEN  FALSE CACHE BOOL "Skip vendored Eigen everywhere"  FORCE)
    
    # Root-level vendored Eigen (only if no target exists)
    include(FetchContent)
    FetchContent_Declare(
        eigen
        GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
        GIT_TAG        3.4.0
    )
    
    # Reduce noise during vendored Eigen build
    set(EIGEN_BUILD_DOC OFF CACHE BOOL "" FORCE)
    set(EIGEN_BUILD_TESTING OFF CACHE BOOL "" FORCE)
    set(EIGEN_BUILD_PKGCONFIG OFF CACHE BOOL "" FORCE)
    
    FetchContent_MakeAvailable(eigen)
    
    # Defensive fallback if Eigen's CMake doesn't create the alias
    if(NOT TARGET Eigen3::Eigen)
        add_library(Eigen3::Eigen INTERFACE IMPORTED)
        target_include_directories(Eigen3::Eigen INTERFACE "${eigen_SOURCE_DIR}")
        message(STATUS "Created fallback Eigen3::Eigen target from vendored source")
    endif()
    
    message(STATUS "Eigen selection: VENDORED (root level)")
elseif(_eigen_ok)
    message(STATUS "Eigen selection: SYSTEM (skipping all vendor operations)")
else()
    message(STATUS "Eigen selection: TARGET EXISTS (skipping vendor to avoid collision)")
endif()

# Validation guard - prevent configuration errors
if(TARGET Eigen3::Eigen)
    message(STATUS "âœ“ Eigen3::Eigen target is available for subdirectories")
else()
    message(FATAL_ERROR "No Eigen3::Eigen target available! This should not happen.")
endif()

# ---------------- Boost (CONFIG mode) ----------------
find_package(Boost REQUIRED CONFIG
    COMPONENTS filesystem system serialization
)
message(STATUS "Found Boost via CONFIG: ${Boost_VERSION}")

# ---------------- Pinocchio (CONFIG mode) ----------------
find_package(pinocchio REQUIRED CONFIG)
message(STATUS "Found pinocchio via CONFIG: ${pinocchio_VERSION}")

# ---------------- Manus SDK Detection ----------------
set(MANUS_SDK_DIR "${CMAKE_SOURCE_DIR}/MANUS_Core_3.0.0_SDK" CACHE PATH "Path to Manus SDK")

if(EXISTS "${MANUS_SDK_DIR}")
    message(STATUS "Found Manus SDK in repository: ${MANUS_SDK_DIR}")
    
    # --------------- Manus SDK headers ---------------
    find_path(MANUS_SDK_INCLUDE_DIR
        NAMES ManusSDK.h Manus.h
        HINTS "${MANUS_SDK_DIR}"
        PATH_SUFFIXES
            include
            ManusSDK/include
            CoreSDK/include
            SDKClient_Windows/ManusSDK/include
            SDKMinimalClient_Windows/ManusSDK/include
    )

    # If not found in common locations, do a recursive search
    if(NOT MANUS_SDK_INCLUDE_DIR)
        file(GLOB_RECURSE _manus_hdr
             "${MANUS_SDK_DIR}/**/ManusSDK.h" 
             "${MANUS_SDK_DIR}/**/Manus.h")
        if(_manus_hdr)
            list(GET _manus_hdr 0 _one_hdr)
            get_filename_component(MANUS_SDK_INCLUDE_DIR "${_one_hdr}" DIRECTORY)
        endif()
    endif()

    if(MANUS_SDK_INCLUDE_DIR)
        message(STATUS "Manus SDK include dir: ${MANUS_SDK_INCLUDE_DIR}")
    else()
        message(WARNING
            "Manus SDK headers not found under: ${MANUS_SDK_DIR}\n"
            "Set -DMANUS_SDK_INCLUDE_DIR=<path to the folder containing ManusSDK.h>")
    endif()

    # --------------- Manus SDK libraries ---------------
    find_library(MANUS_SDK_LIBRARY
        NAMES ManusSDK
        HINTS "${MANUS_SDK_DIR}"
        PATH_SUFFIXES
            ManusSDK/lib
            SDKClient_Windows/ManusSDK/lib
            SDKMinimalClient_Windows/ManusSDK/lib
            Output/x64/Release
            Output/x64/Debug
    )

    # Optional: find the DLL to copy next to the exe at build time
    find_file(MANUS_SDK_DLL
        NAMES ManusSDK.dll
        HINTS "${MANUS_SDK_DIR}"
        PATH_SUFFIXES
            ManusSDK/lib
            SDKClient_Windows/ManusSDK/lib
            SDKMinimalClient_Windows/ManusSDK/lib
            Output/x64/Release
            Output/x64/Debug
    )

    if(MANUS_SDK_LIBRARY)
        message(STATUS "Manus SDK library: ${MANUS_SDK_LIBRARY}")
    else()
        message(WARNING "ManusSDK import library not found")
    endif()

    if(MANUS_SDK_DLL)
        message(STATUS "Manus SDK DLL: ${MANUS_SDK_DLL}")
    endif()

    set(MANUS_SDK_FOUND TRUE)
else()
    message(WARNING "Manus SDK directory not found: ${MANUS_SDK_DIR}")
    set(MANUS_SDK_FOUND FALSE)
endif()

# ---------------- Hand IK Library ----------------
add_subdirectory(hand_ik)

# ---------------- SDKClient Target ----------------
if(MANUS_SDK_FOUND)
    # Determine which source file to use
    set(SDK_CLIENT_SOURCE "${CMAKE_SOURCE_DIR}/src/SDKClientIntegration.cpp")
    
    if(EXISTS "${SDK_CLIENT_SOURCE}")
        message(STATUS "SDKClient will be built using: ${SDK_CLIENT_SOURCE}")
        
        add_executable(SDKClient "${SDK_CLIENT_SOURCE}")
        
        # Include directories
        target_include_directories(SDKClient PRIVATE
            "${CMAKE_SOURCE_DIR}/include"
        )
        
        # Add Manus SDK include directory if found
        if(MANUS_SDK_INCLUDE_DIR)
            target_include_directories(SDKClient PRIVATE "${MANUS_SDK_INCLUDE_DIR}")
        endif()
        
        # Link libraries
        target_link_libraries(SDKClient PRIVATE 
            hand_ik
            Eigen3::Eigen
            Boost::filesystem
            Boost::system
            Boost::serialization
            pinocchio::pinocchio
        )
        
        # Link Manus SDK library if found
        if(MANUS_SDK_LIBRARY)
            target_link_libraries(SDKClient PRIVATE "${MANUS_SDK_LIBRARY}")
        else()
            message(WARNING "ManusSDK import library not found; SDKClient may fail to link")
        endif()
        
        # Copy Manus SDK DLL if found (Windows)
        if(MANUS_SDK_DLL AND WIN32)
            add_custom_command(TARGET SDKClient POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                        "${MANUS_SDK_DLL}" "$<TARGET_FILE_DIR:SDKClient>"
                COMMENT "Copying ManusSDK.dll to output directory"
            )
        endif()
        
        # Set output directories
        set_target_properties(SDKClient PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
        )
        
        # Multi-config generators: add config subdirs
        foreach(OUTPUTCONFIG Debug Release RelWithDebInfo MinSizeRel)
            string(TOUPPER "${OUTPUTCONFIG}" OUTPUTCONFIG_UP)
            set_target_properties(SDKClient PROPERTIES
                RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_UP} "${CMAKE_BINARY_DIR}/bin/${OUTPUTCONFIG}"
            )
        endforeach()
        
    else()
        message(WARNING "SDKClient source file not found: ${SDK_CLIENT_SOURCE}")
    endif()
else()
    message(STATUS "Skipping SDKClient (Manus SDK not found)")
endif()

# ---------------- Test Targets ----------------
if(MANUS_BUILD_TESTS)
    # Basic integration test
    if(EXISTS "${CMAKE_SOURCE_DIR}/tests/test_integration.cpp")
        add_executable(test_integration tests/test_integration.cpp)
        target_link_libraries(test_integration PRIVATE 
            hand_ik
            Eigen3::Eigen
            pinocchio::pinocchio
        )
        add_test(NAME integration_test COMMAND test_integration)
        
        set_target_properties(test_integration PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
        )
        foreach(OUTPUTCONFIG Debug Release RelWithDebInfo MinSizeRel)
            string(TOUPPER "${OUTPUTCONFIG}" OUTPUTCONFIG_UP)
            set_target_properties(test_integration PROPERTIES
                RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_UP} "${CMAKE_BINARY_DIR}/bin/${OUTPUTCONFIG}"
            )
        endforeach()
    else()
        message(STATUS "test_integration.cpp not found, skipping integration test")
    endif()
    
    # Hand IK specific tests
    if(EXISTS "${CMAKE_SOURCE_DIR}/tests/test_hand_ik.cpp")
        add_executable(test_hand_ik tests/test_hand_ik.cpp)
        target_link_libraries(test_hand_ik PRIVATE 
            hand_ik
            Eigen3::Eigen
            pinocchio::pinocchio
        )
        add_test(NAME hand_ik_test COMMAND test_hand_ik)
        
        set_target_properties(test_hand_ik PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
        )
        foreach(OUTPUTCONFIG Debug Release RelWithDebInfo MinSizeRel)
            string(TOUPPER "${OUTPUTCONFIG}" OUTPUTCONFIG_UP)
            set_target_properties(test_hand_ik PROPERTIES
                RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_UP} "${CMAKE_BINARY_DIR}/bin/${OUTPUTCONFIG}"
            )
        endforeach()
    else()
        message(STATUS "test_hand_ik.cpp not found, skipping hand IK test")
    endif()
else()
    message(STATUS "Tests disabled (MANUS_BUILD_TESTS=OFF)")
endif()

# ---------------- Configuration Summary ----------------
message(STATUS "=== Manus Integration Configuration Summary ===")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")

message(STATUS "Dependencies:")
message(STATUS "  Eigen3: ${_eigen_ok} (system: ${USE_SYSTEM_EIGEN})")
message(STATUS "  Boost: ${Boost_VERSION}")
message(STATUS "  Pinocchio: ${pinocchio_VERSION}")

message(STATUS "Manus SDK:")
message(STATUS "  Found: ${MANUS_SDK_FOUND}")
if(MANUS_SDK_FOUND)
    message(STATUS "  Directory: ${MANUS_SDK_DIR}")
    message(STATUS "  Include dir: ${MANUS_SDK_INCLUDE_DIR}")
    message(STATUS "  Library: ${MANUS_SDK_LIBRARY}")
    message(STATUS "  DLL: ${MANUS_SDK_DLL}")
endif()

message(STATUS "Targets:")
message(STATUS "  hand_ik library: YES")
message(STATUS "  SDKClient: ${MANUS_SDK_FOUND}")
message(STATUS "  Tests: ${MANUS_BUILD_TESTS}")
message(STATUS "=============================================")